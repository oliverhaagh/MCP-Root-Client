/*
 * MCP Root CA Service
 * Service for maintaining a list of root CAs
 *
 * OpenAPI spec version: 1.0.0
 * Contact: info@maritimeconnectivity.net
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.client.model.Attestation;
import io.swagger.client.model.Revocation;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import org.threeten.bp.OffsetDateTime;
/**
 * RootCA
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2020-09-23T12:06:32.267Z[GMT]")
public class RootCA {
  @SerializedName("attestations")
  private List<Attestation> attestations = null;

  @SerializedName("certificate")
  private String certificate = null;

  @SerializedName("createdAt")
  private OffsetDateTime createdAt = null;

  @SerializedName("id")
  private Long id = null;

  @SerializedName("name")
  private String name = null;

  @SerializedName("revocations")
  private List<Revocation> revocations = null;

  public RootCA attestations(List<Attestation> attestations) {
    this.attestations = attestations;
    return this;
  }

  public RootCA addAttestationsItem(Attestation attestationsItem) {
    if (this.attestations == null) {
      this.attestations = new ArrayList<Attestation>();
    }
    this.attestations.add(attestationsItem);
    return this;
  }

   /**
   * Get attestations
   * @return attestations
  **/
  @Schema(description = "")
  public List<Attestation> getAttestations() {
    return attestations;
  }

  public void setAttestations(List<Attestation> attestations) {
    this.attestations = attestations;
  }

  public RootCA certificate(String certificate) {
    this.certificate = certificate;
    return this;
  }

   /**
   * PEM encoded certificate of the entity
   * @return certificate
  **/
  @Schema(required = true, description = "PEM encoded certificate of the entity")
  public String getCertificate() {
    return certificate;
  }

  public void setCertificate(String certificate) {
    this.certificate = certificate;
  }

  public RootCA createdAt(OffsetDateTime createdAt) {
    this.createdAt = createdAt;
    return this;
  }

   /**
   * Get createdAt
   * @return createdAt
  **/
  @Schema(description = "")
  public OffsetDateTime getCreatedAt() {
    return createdAt;
  }

  public void setCreatedAt(OffsetDateTime createdAt) {
    this.createdAt = createdAt;
  }

  public RootCA id(Long id) {
    this.id = id;
    return this;
  }

   /**
   * Get id
   * @return id
  **/
  @Schema(description = "")
  public Long getId() {
    return id;
  }

  public void setId(Long id) {
    this.id = id;
  }

  public RootCA name(String name) {
    this.name = name;
    return this;
  }

   /**
   * The name that identifies the entity
   * @return name
  **/
  @Schema(required = true, description = "The name that identifies the entity")
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }

  public RootCA revocations(List<Revocation> revocations) {
    this.revocations = revocations;
    return this;
  }

  public RootCA addRevocationsItem(Revocation revocationsItem) {
    if (this.revocations == null) {
      this.revocations = new ArrayList<Revocation>();
    }
    this.revocations.add(revocationsItem);
    return this;
  }

   /**
   * Get revocations
   * @return revocations
  **/
  @Schema(description = "")
  public List<Revocation> getRevocations() {
    return revocations;
  }

  public void setRevocations(List<Revocation> revocations) {
    this.revocations = revocations;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RootCA rootCA = (RootCA) o;
    return Objects.equals(this.attestations, rootCA.attestations) &&
        Objects.equals(this.certificate, rootCA.certificate) &&
        Objects.equals(this.createdAt, rootCA.createdAt) &&
        Objects.equals(this.id, rootCA.id) &&
        Objects.equals(this.name, rootCA.name) &&
        Objects.equals(this.revocations, rootCA.revocations);
  }

  @Override
  public int hashCode() {
    return Objects.hash(attestations, certificate, createdAt, id, name, revocations);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RootCA {\n");
    
    sb.append("    attestations: ").append(toIndentedString(attestations)).append("\n");
    sb.append("    certificate: ").append(toIndentedString(certificate)).append("\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    revocations: ").append(toIndentedString(revocations)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
